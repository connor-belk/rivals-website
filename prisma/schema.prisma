// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Schema

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  xboxId        String?
  bio           String? @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  points        Int       @default(0)
  teamId        String?
  isAdmin       Boolean   @default(false)
  
  timeTrialResults RivalsResult[]
  wheelToWheelResults WheelToWheelResult[]
  
  team          Team?     @relation(fields: [teamId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  teamId      String
  members     User[]
}

model Season {
  id String @id @default(cuid())
  name String
  description String?
  startsAt DateTime?
  ended Boolean @default(false)
  endsAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rivalsEvents RivalsEvent[]
  wheelToWheelEvents WheelToWheelEvent[]
}

model RivalsEvent {
  id String @id @default(cuid())
  seasonId String
  track String
  vehicle String
  endsAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  finished Boolean

  timeTrialResults RivalsResult[]

  season Season @relation(fields: [seasonId], references: [id])
}

model RivalsResult {
  id String @id @default(cuid())
  userId String
  eventId String
  time String
  piRating Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  event RivalsEvent @relation(fields: [eventId], references: [id])
}

model WheelToWheelEvent {
  id String @id @default(cuid())
  seasonId String
  track String
  vehicle String
  dateTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  finished Boolean

  wheelToWheelResults WheelToWheelResult[]

  season Season @relation(fields: [seasonId], references: [id])
}

model WheelToWheelResult {
  id String @id @default(cuid())
  eventId String
  userId String
  rank Int
  totalRaceTime String
  fastestLapTime String
  fastestQualifyingTime String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event WheelToWheelEvent @relation(fields: [eventId], references: [id])
  user User @relation(fields: [userId], references: [id])
}